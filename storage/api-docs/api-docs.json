{
    "openapi": "3.0.0",
    "info": {
        "title": "BornToMe API Documentation",
        "description": "API documentation for the BornToMe Blog application. This API allows for user authentication, article management, and commenting functionalities.",
        "contact": {
            "email": "judek@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://api.born-to-be-me.com/api",
            "description": "BornToMe API Server"
        }
    ],
    "paths": {
        "/articles": {
            "get": {
                "tags": [
                    "Articles"
                ],
                "summary": "Get list of articles",
                "description": "Returns a paginated list of articles. Can be filtered by status or category.",
                "operationId": "getArticlesList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by article status (draft, published, archived)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "draft",
                                "published",
                                "archived"
                            ]
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of articles per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 15
                        }
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Filter by article category",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Article"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "format": "url"
                                        },
                                        "from": {
                                            "type": "integer"
                                        },
                                        "last_page": {
                                            "type": "integer"
                                        },
                                        "last_page_url": {
                                            "type": "string",
                                            "format": "url"
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "format": "url",
                                            "nullable": true
                                        },
                                        "path": {
                                            "type": "string",
                                            "format": "url"
                                        },
                                        "per_page": {
                                            "type": "integer"
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "format": "url",
                                            "nullable": true
                                        },
                                        "to": {
                                            "type": "integer"
                                        },
                                        "total": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Articles"
                ],
                "summary": "Create a new article",
                "description": "Creates a new article. The authenticated user will be set as the author.",
                "operationId": "storeArticle",
                "requestBody": {
                    "description": "Article data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ArticleInput"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Article created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Article"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/articles/{article_id}": {
            "get": {
                "tags": [
                    "Articles"
                ],
                "summary": "Get article information",
                "description": "Returns a single article by its ID.",
                "operationId": "getArticleById",
                "parameters": [
                    {
                        "name": "article_id",
                        "in": "path",
                        "description": "ID of article to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Article"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Article not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Articles"
                ],
                "summary": "Update an existing article",
                "description": "Updates an existing article. Only the author or an admin can perform this action.",
                "operationId": "updateArticle",
                "parameters": [
                    {
                        "name": "article_id",
                        "in": "path",
                        "description": "ID of article to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Article data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ArticleInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Article updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Article"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to update this article"
                    },
                    "404": {
                        "description": "Article not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Articles"
                ],
                "summary": "Delete an article",
                "description": "Deletes an existing article. Only the author or an admin can perform this action.",
                "operationId": "deleteArticle",
                "parameters": [
                    {
                        "name": "article_id",
                        "in": "path",
                        "description": "ID of article to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Article deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to delete this article"
                    },
                    "404": {
                        "description": "Article not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "Creates a new user account and returns a user object and an access token.",
                "operationId": "registerUser",
                "requestBody": {
                    "description": "User registration data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "fullname",
                                    "email",
                                    "password",
                                    "password_confirmation",
                                    "datebirthday",
                                    "gender"
                                ],
                                "properties": {
                                    "fullname": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.doe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "minLength": 8,
                                        "example": "password123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "format": "password",
                                        "minLength": 8,
                                        "example": "password123"
                                    },
                                    "datebirthday": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "1990-01-01"
                                    },
                                    "gender": {
                                        "type": "string",
                                        "enum": [
                                            "male",
                                            "female",
                                            "other"
                                        ],
                                        "example": "male"
                                    },
                                    "linkphoto": {
                                        "type": "string",
                                        "format": "url",
                                        "example": "http://example.com/photo.jpg",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User registered successfully"
                                        },
                                        "access_token": {
                                            "type": "string",
                                            "example": "1|abcdef123456"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Log in an existing user",
                "description": "Logs in a user and returns an access token and user details.",
                "operationId": "loginUser",
                "requestBody": {
                    "description": "User login credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "john.doe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User logged in successfully"
                                        },
                                        "access_token": {
                                            "type": "string",
                                            "example": "2|abcdef123456"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid login details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid login details"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Log out the current user",
                "description": "Invalidates the current user's access token.",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successfully logged out"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/user": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get the authenticated user's details",
                "description": "Returns the details of the currently authenticated user.",
                "operationId": "getAuthenticatedUser",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/email/resend-verification": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Resend email verification notification",
                "description": "Resends the email verification link to the authenticated user if their email is not yet verified.",
                "operationId": "resendVerificationEmail",
                "responses": {
                    "200": {
                        "description": "Verification link sent.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Verification link sent."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Email already verified.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email already verified."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/email/verify/{id}/{hash}": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify user's email address",
                "description": "Verifies the user's email address using the ID and hash from the verification link. This endpoint is typically accessed by clicking a link from an email.",
                "operationId": "verifyEmailAddress",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User ID (UUID)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    },
                    {
                        "name": "hash",
                        "in": "path",
                        "description": "Verification hash",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expires",
                        "in": "query",
                        "description": "Expiration timestamp for the signed URL",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "signature",
                        "in": "query",
                        "description": "Signature for the signed URL",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email successfully verified.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email address successfully verified."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Email already verified.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Email address already verified."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid verification link or hash mismatch."
                    },
                    "403": {
                        "description": "Invalid or expired verification link (signature validation failed)."
                    },
                    "404": {
                        "description": "User not found for verification."
                    }
                }
            }
        },
        "/books": {
            "get": {
                "tags": [
                    "Books"
                ],
                "summary": "Get list of books",
                "description": "Returns a paginated list of books. Can be filtered by status, author, title, or price range.",
                "operationId": "getBooksList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter by book status",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "draft",
                                "available",
                                "out_of_stock",
                                "discontinued"
                            ]
                        }
                    },
                    {
                        "name": "author_name",
                        "in": "query",
                        "description": "Filter by author's name (partial match)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "title",
                        "in": "query",
                        "description": "Filter by book title (partial match)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "min_price",
                        "in": "query",
                        "description": "Minimum price",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "max_price",
                        "in": "query",
                        "description": "Maximum price",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Book"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "format": "url"
                                        },
                                        "from": {
                                            "type": "integer"
                                        },
                                        "last_page": {
                                            "type": "integer"
                                        },
                                        "last_page_url": {
                                            "type": "string",
                                            "format": "url"
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "format": "url",
                                            "nullable": true
                                        },
                                        "path": {
                                            "type": "string",
                                            "format": "url"
                                        },
                                        "per_page": {
                                            "type": "integer"
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "format": "url",
                                            "nullable": true
                                        },
                                        "to": {
                                            "type": "integer"
                                        },
                                        "total": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Books"
                ],
                "summary": "Create a new book listing",
                "description": "Creates a new book. The authenticated user will be set as the seller.",
                "operationId": "storeBook",
                "requestBody": {
                    "description": "Book data to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookInput"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Book created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Book"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/books/{book_id}": {
            "get": {
                "tags": [
                    "Books"
                ],
                "summary": "Get book information",
                "description": "Returns a single book by its ID.",
                "operationId": "getBookById",
                "parameters": [
                    {
                        "name": "book_id",
                        "in": "path",
                        "description": "ID of book to return",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Book"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Book not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Books"
                ],
                "summary": "Update an existing book listing",
                "description": "Updates an existing book. Only the seller or an admin can perform this action.",
                "operationId": "updateBook",
                "parameters": [
                    {
                        "name": "book_id",
                        "in": "path",
                        "description": "ID of book to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Book data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BookInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Book updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Book"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to update this book"
                    },
                    "404": {
                        "description": "Book not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Books"
                ],
                "summary": "Delete a book listing",
                "description": "Deletes an existing book. Only the seller or an admin can perform this action.",
                "operationId": "deleteBook",
                "parameters": [
                    {
                        "name": "book_id",
                        "in": "path",
                        "description": "ID of book to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Book deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Book deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to delete this book"
                    },
                    "404": {
                        "description": "Book not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/articles/{article_id}/comments": {
            "get": {
                "tags": [
                    "Comments"
                ],
                "summary": "Get comments for an article",
                "description": "Returns a paginated list of comments for a specific article, including replies.",
                "operationId": "getArticleComments",
                "parameters": [
                    {
                        "name": "article_id",
                        "in": "path",
                        "description": "ID of the article",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Comment"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string",
                                            "format": "url"
                                        },
                                        "from": {
                                            "type": "integer"
                                        },
                                        "last_page": {
                                            "type": "integer"
                                        },
                                        "last_page_url": {
                                            "type": "string",
                                            "format": "url"
                                        },
                                        "links": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "next_page_url": {
                                            "type": "string",
                                            "format": "url",
                                            "nullable": true
                                        },
                                        "path": {
                                            "type": "string",
                                            "format": "url"
                                        },
                                        "per_page": {
                                            "type": "integer"
                                        },
                                        "prev_page_url": {
                                            "type": "string",
                                            "format": "url",
                                            "nullable": true
                                        },
                                        "to": {
                                            "type": "integer"
                                        },
                                        "total": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Article not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Comments"
                ],
                "summary": "Create a new comment or reply",
                "description": "Creates a new comment on an article. Can also be a reply to an existing comment if parent_id is provided.",
                "operationId": "storeComment",
                "parameters": [
                    {
                        "name": "article_id",
                        "in": "path",
                        "description": "ID of the article to comment on",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Comment data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommentInput"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Comment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Article or Parent Comment not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/comments/{comment_id}": {
            "put": {
                "tags": [
                    "Comments"
                ],
                "summary": "Update an existing comment",
                "description": "Updates an existing comment. Only the author or an admin can perform this action.",
                "operationId": "updateComment",
                "parameters": [
                    {
                        "name": "comment_id",
                        "in": "path",
                        "description": "ID of the comment to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Comment data to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "content"
                                ],
                                "properties": {
                                    "content": {
                                        "type": "string",
                                        "example": "Updated comment content."
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comment updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to update this comment"
                    },
                    "404": {
                        "description": "Comment not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Comments"
                ],
                "summary": "Delete a comment",
                "description": "Deletes an existing comment. Only the author or an admin can perform this action. Deleting a comment will also delete its replies if cascade is set.",
                "operationId": "deleteComment",
                "parameters": [
                    {
                        "name": "comment_id",
                        "in": "path",
                        "description": "ID of the comment to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Comment deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to delete this comment"
                    },
                    "404": {
                        "description": "Comment not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/contact": {
            "post": {
                "tags": [
                    "Contact"
                ],
                "summary": "Send a contact form message",
                "description": "Allows any user to send a message via the contact form to the application owner.",
                "operationId": "sendContactForm",
                "requestBody": {
                    "description": "Contact form data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "message"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Sender's name",
                                        "type": "string",
                                        "example": "Visitor Name"
                                    },
                                    "email": {
                                        "description": "Sender's email address",
                                        "type": "string",
                                        "format": "email",
                                        "example": "visitor@example.com"
                                    },
                                    "subject": {
                                        "description": "Subject of the message",
                                        "type": "string",
                                        "example": "Inquiry about services",
                                        "nullable": true
                                    },
                                    "message": {
                                        "description": "The message content",
                                        "type": "string",
                                        "example": "I would like to know more about..."
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Your message has been sent successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get list of users (Admin only)",
                "description": "Returns a paginated list of users. This endpoint is restricted to administrators.",
                "operationId": "getUsersList",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Admin access required"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{user_id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get user information",
                "description": "Returns user data. Admins can fetch any user. Regular users can only fetch their own profile.",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "ID of user to return (UUID format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Cannot access this user's profile"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user (Admin only)",
                "description": "Deletes a user. This endpoint is restricted to administrators.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "ID of user to delete (UUID format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Admin access required or cannot delete self"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{user_id}/profile": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user profile information",
                "description": "Updates user's fullname, birthday, gender, bio, and preferences only. Admins can update any user. Regular users can only update their own profile.",
                "operationId": "updateUserProfile",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "ID of user to update (UUID format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User profile data to update",
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "fullname": {
                                        "description": "User's full name",
                                        "type": "string",
                                        "example": "Jane Doe Updated",
                                        "nullable": true
                                    },
                                    "datebirthday": {
                                        "description": "User's date of birth",
                                        "type": "string",
                                        "format": "date",
                                        "example": "1991-06-16",
                                        "nullable": true
                                    },
                                    "gender": {
                                        "description": "User's gender",
                                        "type": "string",
                                        "enum": [
                                            "male",
                                            "female",
                                            "other"
                                        ],
                                        "example": "female",
                                        "nullable": true
                                    },
                                    "bio": {
                                        "description": "User's biography",
                                        "type": "string",
                                        "example": "An updated bio about myself.",
                                        "nullable": true
                                    },
                                    "preferences": {
                                        "description": "User's preferences",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            "hiking",
                                            "reading"
                                        ],
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Cannot update this user's profile"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{user_id}/password": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Change user password",
                "description": "Changes user password. Admins can change any user's password without current password. Regular users must provide current password and can only change their own.",
                "operationId": "changeUserPassword",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "ID of user to update password (UUID format)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Password change data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "new_password",
                                    "new_password_confirmation"
                                ],
                                "properties": {
                                    "current_password": {
                                        "description": "Current password (required for non-admin users)",
                                        "type": "string",
                                        "format": "password",
                                        "example": "currentpassword123"
                                    },
                                    "new_password": {
                                        "description": "New password (min 8 characters)",
                                        "type": "string",
                                        "format": "password",
                                        "example": "newpassword123"
                                    },
                                    "new_password_confirmation": {
                                        "description": "New password confirmation",
                                        "type": "string",
                                        "format": "password",
                                        "example": "newpassword123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password changed successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Cannot change this user's password"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{user_id}/info": {
            "get": {
                "tags": [
                    "User Info"
                ],
                "summary": "Get additional information for a user",
                "description": "Returns the bio and preferences for a specific user. Users can view their own info; admins can view any.",
                "operationId": "getUserInfo",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "UUID of the user",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInfo"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to view this info"
                    },
                    "404": {
                        "description": "User or UserInfo not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "User Info"
                ],
                "summary": "Create or update additional information for a user (PUT)",
                "description": "Creates or updates the bio and preferences for a specific user using PUT. Users can manage their own info; admins can manage any.",
                "operationId": "storeOrUpdateUserInfoPut",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "UUID of the user",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User info data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserInfoInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User info updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInfo"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "User info created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInfo"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to manage this info"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "User Info"
                ],
                "summary": "Create or update additional information for a user",
                "description": "Creates or updates the bio and preferences for a specific user. Users can manage their own info; admins can manage any.",
                "operationId": "storeOrUpdateUserInfo",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "UUID of the user",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "requestBody": {
                    "description": "User info data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserInfoInput"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User info updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInfo"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "User info created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserInfo"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Forbidden - Not authorized to manage this info"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ValidationError": {
                "title": "Validation Error",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "The given data was invalid."
                    },
                    "errors": {
                        "type": "object",
                        "example": {
                            "field_name": [
                                "Error message for this field."
                            ]
                        }
                    }
                },
                "type": "object"
            },
            "Article": {
                "title": "Article Model",
                "description": "Represents an article in the blog.",
                "required": [
                    "title",
                    "category",
                    "content"
                ],
                "properties": {
                    "idarticles": {
                        "description": "Primary key ID of the article",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "title": {
                        "description": "Title of the article",
                        "type": "string",
                        "example": "Understanding Laravel"
                    },
                    "category": {
                        "description": "Category of the article",
                        "type": "string",
                        "example": "PHP Frameworks"
                    },
                    "description": {
                        "description": "A short description or summary of the article",
                        "type": "string",
                        "example": "A brief overview of Laravel's core concepts.",
                        "nullable": true
                    },
                    "content": {
                        "description": "Main content of the article",
                        "type": "string",
                        "example": "Laravel is a web application framework..."
                    },
                    "user_id": {
                        "description": "UUID of the author (User)",
                        "type": "string",
                        "format": "uuid",
                        "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                    },
                    "link_picture": {
                        "description": "URL to the article's main picture",
                        "type": "string",
                        "format": "url",
                        "example": "http://example.com/laravel.jpg",
                        "nullable": true
                    },
                    "status": {
                        "description": "Status of the article",
                        "type": "string",
                        "default": "draft",
                        "enum": [
                            "draft",
                            "published",
                            "archived"
                        ],
                        "example": "published"
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-02-01T10:00:00Z"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-02-01T11:00:00Z"
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            },
            "ArticleInput": {
                "title": "Article Input",
                "description": "Data required to create or update an article.",
                "required": [
                    "title",
                    "category",
                    "content"
                ],
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "My New Article"
                    },
                    "category": {
                        "type": "string",
                        "example": "Tutorials"
                    },
                    "description": {
                        "type": "string",
                        "example": "This article covers the basics of X.",
                        "nullable": true
                    },
                    "content": {
                        "type": "string",
                        "example": "This is the content of my new article."
                    },
                    "link_picture": {
                        "type": "string",
                        "format": "url",
                        "example": "http://example.com/new_article.png",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "default": "draft",
                        "enum": [
                            "draft",
                            "published",
                            "archived"
                        ],
                        "example": "draft"
                    }
                },
                "type": "object"
            },
            "Book": {
                "title": "Book Model",
                "description": "Represents a book available for selling.",
                "required": [
                    "idbooks",
                    "title",
                    "author_name",
                    "price",
                    "currency",
                    "user_id",
                    "status"
                ],
                "properties": {
                    "idbooks": {
                        "description": "Primary key ID of the book",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "title": {
                        "description": "Title of the book",
                        "type": "string",
                        "example": "The Great Novel"
                    },
                    "author_name": {
                        "description": "Name of the book's author",
                        "type": "string",
                        "example": "John Writer"
                    },
                    "isbn": {
                        "description": "ISBN of the book",
                        "type": "string",
                        "example": "978-3-16-148410-0",
                        "nullable": true
                    },
                    "description": {
                        "description": "Detailed description of the book",
                        "type": "string",
                        "example": "An amazing story about...",
                        "nullable": true
                    },
                    "price": {
                        "description": "Price of the book",
                        "type": "number",
                        "format": "float",
                        "example": 19.99
                    },
                    "currency": {
                        "description": "Currency code for the price (e.g., USD, EUR)",
                        "type": "string",
                        "maxLength": 3,
                        "example": "USD"
                    },
                    "publication_date": {
                        "description": "Date the book was published",
                        "type": "string",
                        "format": "date",
                        "example": "2023-05-15",
                        "nullable": true
                    },
                    "cover_image_url": {
                        "description": "URL to the book's cover image",
                        "type": "string",
                        "format": "url",
                        "example": "http://example.com/cover.jpg",
                        "nullable": true
                    },
                    "stock_quantity": {
                        "description": "Number of items in stock",
                        "type": "integer",
                        "format": "int32",
                        "example": 100
                    },
                    "status": {
                        "description": "Availability status of the book",
                        "type": "string",
                        "enum": [
                            "draft",
                            "available",
                            "out_of_stock",
                            "discontinued"
                        ],
                        "example": "available"
                    },
                    "user_id": {
                        "description": "UUID of the user (seller/publisher) who listed the book",
                        "type": "string",
                        "format": "uuid",
                        "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                    },
                    "created_at": {
                        "description": "Timestamp of book creation",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-01-01T12:00:00Z"
                    },
                    "updated_at": {
                        "description": "Timestamp of last book update",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-01-01T12:30:00Z"
                    },
                    "seller": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            },
            "BookInput": {
                "title": "Book Input Data",
                "description": "Data required to create or update a book.",
                "required": [
                    "title",
                    "author_name",
                    "price"
                ],
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "My New Book"
                    },
                    "author_name": {
                        "type": "string",
                        "example": "Jane Author"
                    },
                    "isbn": {
                        "type": "string",
                        "example": "978-1-23-456789-0",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "example": "A brief description of the book.",
                        "nullable": true
                    },
                    "price": {
                        "type": "number",
                        "format": "float",
                        "example": 29.95
                    },
                    "currency": {
                        "type": "string",
                        "default": "USD",
                        "maxLength": 3,
                        "example": "USD"
                    },
                    "publication_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2024-01-01",
                        "nullable": true
                    },
                    "cover_image_url": {
                        "type": "string",
                        "format": "url",
                        "example": "http://example.com/my_book_cover.png",
                        "nullable": true
                    },
                    "stock_quantity": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0,
                        "example": 50
                    },
                    "status": {
                        "type": "string",
                        "default": "draft",
                        "enum": [
                            "draft",
                            "available",
                            "out_of_stock",
                            "discontinued"
                        ],
                        "example": "draft"
                    }
                },
                "type": "object"
            },
            "Comment": {
                "title": "Comment Model",
                "description": "Represents a comment on an article, potentially as a reply to another comment.",
                "required": [
                    "id",
                    "content",
                    "user_id",
                    "article_id"
                ],
                "properties": {
                    "id": {
                        "description": "Primary key ID of the comment",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "content": {
                        "description": "The content of the comment",
                        "type": "string",
                        "example": "Great article!"
                    },
                    "user_id": {
                        "description": "UUID of the user who wrote the comment",
                        "type": "string",
                        "format": "uuid",
                        "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                    },
                    "article_id": {
                        "description": "ID of the article this comment belongs to",
                        "type": "integer",
                        "format": "int64",
                        "example": 101
                    },
                    "parent_id": {
                        "description": "ID of the parent comment if this is a reply",
                        "type": "integer",
                        "format": "int64",
                        "example": 5,
                        "nullable": true
                    },
                    "created_at": {
                        "description": "Timestamp of comment creation",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-03-01T10:00:00Z"
                    },
                    "updated_at": {
                        "description": "Timestamp of last comment update",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-03-01T10:05:00Z"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "article": {
                        "$ref": "#/components/schemas/Article"
                    },
                    "replies": {
                        "description": "Replies to this comment",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        },
                        "readOnly": true,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "CommentInput": {
                "title": "Comment Input Data",
                "description": "Data required to create or update a comment.",
                "required": [
                    "content"
                ],
                "properties": {
                    "content": {
                        "type": "string",
                        "example": "This is my comment."
                    },
                    "parent_id": {
                        "description": "ID of the parent comment if this is a reply. Omit or send null for a top-level comment.",
                        "type": "integer",
                        "format": "int64",
                        "example": 10,
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "User": {
                "title": "User Model",
                "description": "User model representing an application user.",
                "required": [
                    "iduser",
                    "fullname",
                    "email",
                    "datebirthday",
                    "gender",
                    "role"
                ],
                "properties": {
                    "iduser": {
                        "description": "Primary key UUID of the user",
                        "type": "string",
                        "format": "uuid",
                        "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                    },
                    "fullname": {
                        "description": "User's full name",
                        "type": "string",
                        "example": "Jane Doe"
                    },
                    "email": {
                        "description": "User's email address",
                        "type": "string",
                        "format": "email",
                        "example": "jane.doe@example.com"
                    },
                    "datebirthday": {
                        "description": "User's date of birth",
                        "type": "string",
                        "format": "date",
                        "example": "1995-05-15"
                    },
                    "gender": {
                        "description": "User's gender",
                        "type": "string",
                        "enum": [
                            "male",
                            "female",
                            "other"
                        ],
                        "example": "female"
                    },
                    "linkphoto": {
                        "description": "URL to user's profile photo",
                        "type": "string",
                        "format": "url",
                        "example": "http://example.com/jane.jpg",
                        "nullable": true
                    },
                    "role": {
                        "description": "User's role in the application",
                        "type": "string",
                        "enum": [
                            "user",
                            "admin",
                            "editor"
                        ],
                        "example": "user"
                    },
                    "created_at": {
                        "description": "Timestamp of user creation",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-01-01T12:00:00Z"
                    },
                    "updated_at": {
                        "description": "Timestamp of last user update",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-01-01T12:30:00Z"
                    },
                    "email_verified_at": {
                        "description": "Timestamp of email verification",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "example": "2023-01-01T12:05:00Z",
                        "nullable": true
                    },
                    "user_info": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserInfo"
                            }
                        ],
                        "nullable": true,
                        "description": "Additional user information",
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "UserInfo": {
                "title": "User Info Model",
                "description": "Represents additional information for a user, like bio and preferences.",
                "required": [
                    "id",
                    "user_id"
                ],
                "properties": {
                    "id": {
                        "description": "Primary key ID of the user info record",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true,
                        "example": 1
                    },
                    "user_id": {
                        "description": "UUID of the user this info belongs to",
                        "type": "string",
                        "format": "uuid",
                        "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                    },
                    "bio": {
                        "description": "A short biography of the user",
                        "type": "string",
                        "example": "Loves coding and hiking.",
                        "nullable": true
                    },
                    "preferences": {
                        "description": "A list of user interests or preferences (e.g., hobbies, topics).",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Book",
                            "Read",
                            "Sport",
                            "Natation",
                            "Travel"
                        ],
                        "nullable": true
                    },
                    "created_at": {
                        "description": "Timestamp of creation",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "description": "Timestamp of last update",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "UserInfoInput": {
                "title": "User Info Input Data",
                "description": "Data required to create or update user information.",
                "properties": {
                    "bio": {
                        "type": "string",
                        "example": "Passionate about web development and open source.",
                        "nullable": true
                    },
                    "preferences": {
                        "description": "A list of user interests or preferences.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Photography",
                            "Music",
                            "Cooking"
                        ],
                        "nullable": true
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Enter token in format (Bearer <token>)",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "User authentication endpoints (register, login, logout)"
        },
        {
            "name": "Users",
            "description": "User related endpoints (e.g., fetching authenticated user details)"
        },
        {
            "name": "Articles",
            "description": "Article management endpoints (CRUD operations for articles)"
        },
        {
            "name": "Comments",
            "description": "Comment management endpoints (CRUD operations for comments - to be implemented)"
        },
        {
            "name": "Contact",
            "description": "Contact form submission endpoint"
        },
        {
            "name": "Books",
            "description": "Books"
        },
        {
            "name": "User Info",
            "description": "User Info"
        }
    ]
}